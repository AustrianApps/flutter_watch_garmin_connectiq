// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum PigeonIqDeviceStatus: Int {
  case notPaired = 0
  case notConnected = 1
  case connected = 2
  case unknown = 3
}

enum PigeonIqAppStatus: Int {
  case unknown = 0
  case installed = 1
  case notInstalled = 2
  case notSupported = 3
}

enum PigeonIqOpenApplicationStatus: Int {
  case promptShownOnDevice = 0
  case promptNotShownOnDevice = 1
  case appIsNotInstalled = 2
  case appIsAlreadyRunning = 3
  case unknownFailure = 4
}

enum PigeonIqMessageStatus: Int {
  case success = 0
  case failureUnknown = 1
  case failureInvalidFormat = 2
  case failureMessageTooLarge = 3
  case failureUnsupportedType = 4
  case failureDuringTransfer = 5
  case failureInvalidDevice = 6
  case failureDeviceNotConnected = 7
}

enum ConnectType: Int {
  case wireless = 0
  case adb = 1
}

enum InitStatus: Int {
  case success = 0
  case errorGcmNotInstalled = 1
  case errorGcmUpgradeNeeded = 2
  case errorServiceError = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonIqDevice {
  var deviceIdentifier: String
  var friendlyName: String
  var status: PigeonIqDeviceStatus

  static func fromList(_ list: [Any?]) -> PigeonIqDevice? {
    let deviceIdentifier = list[0] as! String
    let friendlyName = list[1] as! String
    let status = PigeonIqDeviceStatus(rawValue: list[2] as! Int)!

    return PigeonIqDevice(
      deviceIdentifier: deviceIdentifier,
      friendlyName: friendlyName,
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      deviceIdentifier,
      friendlyName,
      status.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonIqApp {
  var applicationId: String
  var status: PigeonIqAppStatus
  var displayName: String
  var version: Int64

  static func fromList(_ list: [Any?]) -> PigeonIqApp? {
    let applicationId = list[0] as! String
    let status = PigeonIqAppStatus(rawValue: list[1] as! Int)!
    let displayName = list[2] as! String
    let version = list[3] is Int64 ? list[3] as! Int64 : Int64(list[3] as! Int32)

    return PigeonIqApp(
      applicationId: applicationId,
      status: status,
      displayName: displayName,
      version: version
    )
  }
  func toList() -> [Any?] {
    return [
      applicationId,
      status.rawValue,
      displayName,
      version,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonIqOpenApplicationResult {
  var status: PigeonIqOpenApplicationStatus

  static func fromList(_ list: [Any?]) -> PigeonIqOpenApplicationResult? {
    let status = PigeonIqOpenApplicationStatus(rawValue: list[0] as! Int)!

    return PigeonIqOpenApplicationResult(
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      status.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonIqMessageResult {
  var status: PigeonIqMessageStatus
  var failureDetails: String? = nil

  static func fromList(_ list: [Any?]) -> PigeonIqMessageResult? {
    let status = PigeonIqMessageStatus(rawValue: list[0] as! Int)!
    let failureDetails: String? = nilOrValue(list[1])

    return PigeonIqMessageResult(
      status: status,
      failureDetails: failureDetails
    )
  }
  func toList() -> [Any?] {
    return [
      status.rawValue,
      failureDetails,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct InitAndroidOptions {
  var connectType: ConnectType
  var adbPort: Int64? = nil

  static func fromList(_ list: [Any?]) -> InitAndroidOptions? {
    let connectType = ConnectType(rawValue: list[0] as! Int)!
    let adbPort: Int64? = list[1] is NSNull ? nil : (list[1] is Int64? ? list[1] as! Int64? : Int64(list[1] as! Int32))

    return InitAndroidOptions(
      connectType: connectType,
      adbPort: adbPort
    )
  }
  func toList() -> [Any?] {
    return [
      connectType.rawValue,
      adbPort,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct InitIosOptions {
  var urlScheme: String

  static func fromList(_ list: [Any?]) -> InitIosOptions? {
    let urlScheme = list[0] as! String

    return InitIosOptions(
      urlScheme: urlScheme
    )
  }
  func toList() -> [Any?] {
    return [
      urlScheme,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AppId {
  var applicationId: String
  var storeId: String? = nil

  static func fromList(_ list: [Any?]) -> AppId? {
    let applicationId = list[0] as! String
    let storeId: String? = nilOrValue(list[1])

    return AppId(
      applicationId: applicationId,
      storeId: storeId
    )
  }
  func toList() -> [Any?] {
    return [
      applicationId,
      storeId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct InitOptions {
  var applicationIds: [AppId?]
  var iosOptions: InitIosOptions
  var androidOptions: InitAndroidOptions

  static func fromList(_ list: [Any?]) -> InitOptions? {
    let applicationIds = list[0] as! [AppId?]
    let iosOptions = InitIosOptions.fromList(list[1] as! [Any?])!
    let androidOptions = InitAndroidOptions.fromList(list[2] as! [Any?])!

    return InitOptions(
      applicationIds: applicationIds,
      iosOptions: iosOptions,
      androidOptions: androidOptions
    )
  }
  func toList() -> [Any?] {
    return [
      applicationIds,
      iosOptions.toList(),
      androidOptions.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct InitResult {
  var status: InitStatus

  static func fromList(_ list: [Any?]) -> InitResult? {
    let status = InitStatus(rawValue: list[0] as! Int)!

    return InitResult(
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      status.rawValue,
    ]
  }
}

private class ConnectIqHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AppId.fromList(self.readValue() as! [Any?])
      case 129:
        return InitAndroidOptions.fromList(self.readValue() as! [Any?])
      case 130:
        return InitIosOptions.fromList(self.readValue() as! [Any?])
      case 131:
        return InitOptions.fromList(self.readValue() as! [Any?])
      case 132:
        return InitResult.fromList(self.readValue() as! [Any?])
      case 133:
        return PigeonIqApp.fromList(self.readValue() as! [Any?])
      case 134:
        return PigeonIqDevice.fromList(self.readValue() as! [Any?])
      case 135:
        return PigeonIqMessageResult.fromList(self.readValue() as! [Any?])
      case 136:
        return PigeonIqOpenApplicationResult.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ConnectIqHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AppId {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? InitAndroidOptions {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? InitIosOptions {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? InitOptions {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? InitResult {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonIqApp {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonIqDevice {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonIqMessageResult {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonIqOpenApplicationResult {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ConnectIqHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ConnectIqHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ConnectIqHostApiCodecWriter(data: data)
  }
}

class ConnectIqHostApiCodec: FlutterStandardMessageCodec {
  static let shared = ConnectIqHostApiCodec(readerWriter: ConnectIqHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ConnectIqHostApi {
  func initialize(initOptions: InitOptions, completion: @escaping (Result<InitResult, Error>) -> Void)
  func getKnownDevices(completion: @escaping (Result<[PigeonIqDevice], Error>) -> Void)
  func getConnectedDevices(completion: @escaping (Result<[PigeonIqDevice], Error>) -> Void)
  func getApplicationInfo(deviceId: String, applicationId: String, completion: @escaping (Result<PigeonIqApp, Error>) -> Void)
  func openApplication(deviceId: String, applicationId: String, completion: @escaping (Result<PigeonIqOpenApplicationResult, Error>) -> Void)
  func openStore(app: AppId, completion: @escaping (Result<Bool, Error>) -> Void)
  func sendMessage(deviceId: String, applicationId: String, message: [String: Any], completion: @escaping (Result<PigeonIqMessageResult, Error>) -> Void)
  func openStoreForGcm(completion: @escaping (Result<Void, Error>) -> Void)
  func iOsShowDeviceSelection(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ConnectIqHostApiSetup {
  /// The codec used by ConnectIqHostApi.
  static var codec: FlutterStandardMessageCodec { ConnectIqHostApiCodec.shared }
  /// Sets up an instance of `ConnectIqHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ConnectIqHostApi?) {
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let initOptionsArg = args[0] as! InitOptions
        api.initialize(initOptions: initOptionsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let getKnownDevicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.getKnownDevices", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getKnownDevicesChannel.setMessageHandler { _, reply in
        api.getKnownDevices() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getKnownDevicesChannel.setMessageHandler(nil)
    }
    let getConnectedDevicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.getConnectedDevices", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getConnectedDevicesChannel.setMessageHandler { _, reply in
        api.getConnectedDevices() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getConnectedDevicesChannel.setMessageHandler(nil)
    }
    let getApplicationInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.getApplicationInfo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getApplicationInfoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let applicationIdArg = args[1] as! String
        api.getApplicationInfo(deviceId: deviceIdArg, applicationId: applicationIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getApplicationInfoChannel.setMessageHandler(nil)
    }
    let openApplicationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.openApplication", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openApplicationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let applicationIdArg = args[1] as! String
        api.openApplication(deviceId: deviceIdArg, applicationId: applicationIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      openApplicationChannel.setMessageHandler(nil)
    }
    let openStoreChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.openStore", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openStoreChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appArg = args[0] as! AppId
        api.openStore(app: appArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      openStoreChannel.setMessageHandler(nil)
    }
    let sendMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.sendMessage", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deviceIdArg = args[0] as! String
        let applicationIdArg = args[1] as! String
        let messageArg = args[2] as! [String: Any]
        api.sendMessage(deviceId: deviceIdArg, applicationId: applicationIdArg, message: messageArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      sendMessageChannel.setMessageHandler(nil)
    }
    let openStoreForGcmChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.openStoreForGcm", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openStoreForGcmChannel.setMessageHandler { _, reply in
        api.openStoreForGcm() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      openStoreForGcmChannel.setMessageHandler(nil)
    }
    let iOsShowDeviceSelectionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.iOsShowDeviceSelection", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      iOsShowDeviceSelectionChannel.setMessageHandler { _, reply in
        api.iOsShowDeviceSelection() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      iOsShowDeviceSelectionChannel.setMessageHandler(nil)
    }
  }
}
private class FlutterConnectIqApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AppId.fromList(self.readValue() as! [Any?])
      case 129:
        return InitAndroidOptions.fromList(self.readValue() as! [Any?])
      case 130:
        return InitIosOptions.fromList(self.readValue() as! [Any?])
      case 131:
        return InitOptions.fromList(self.readValue() as! [Any?])
      case 132:
        return InitResult.fromList(self.readValue() as! [Any?])
      case 133:
        return PigeonIqApp.fromList(self.readValue() as! [Any?])
      case 134:
        return PigeonIqDevice.fromList(self.readValue() as! [Any?])
      case 135:
        return PigeonIqMessageResult.fromList(self.readValue() as! [Any?])
      case 136:
        return PigeonIqOpenApplicationResult.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class FlutterConnectIqApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AppId {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? InitAndroidOptions {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? InitIosOptions {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? InitOptions {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? InitResult {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonIqApp {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonIqDevice {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonIqMessageResult {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonIqOpenApplicationResult {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterConnectIqApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterConnectIqApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterConnectIqApiCodecWriter(data: data)
  }
}

class FlutterConnectIqApiCodec: FlutterStandardMessageCodec {
  static let shared = FlutterConnectIqApiCodec(readerWriter: FlutterConnectIqApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class FlutterConnectIqApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return FlutterConnectIqApiCodec.shared
  }
  func onDeviceStatusChanged(device deviceArg: PigeonIqDevice, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onDeviceStatusChanged", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg] as [Any?]) { _ in
      completion()
    }
  }
  func onMessageReceived(device deviceArg: PigeonIqDevice, app appArg: PigeonIqApp, message messageArg: Any, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onMessageReceived", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceArg, appArg, messageArg] as [Any?]) { _ in
      completion()
    }
  }
  func showGcmInstallDialog(requiresUpgrade requiresUpgradeArg: Bool, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.showGcmInstallDialog", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requiresUpgradeArg] as [Any?]) { _ in
      completion()
    }
  }
}
