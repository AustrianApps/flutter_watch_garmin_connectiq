// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum PigeonIqDeviceStatus {
  notPaired,
  notConnected,
  connected,
  unknown,
}

enum PigeonIqAppStatus {
  unknown,
  installed,
  notInstalled,
  notSupported,
}

enum PigeonIqOpenApplicationStatus {
  promptShownOnDevice,
  promptNotShownOnDevice,
  appIsNotInstalled,
  appIsAlreadyRunning,
  unknownFailure,
}

enum PigeonIqMessageStatus {
  success,
  failureUnknown,
  failureInvalidFormat,
  failureMessageTooLarge,
  failureUnsupportedType,
  failureDuringTransfer,
  failureInvalidDevice,
  failureDeviceNotConnected,
}

enum ConnectType {
  wireless,
  adb,
}

enum InitStatus {
  success,
  errorGcmNotInstalled,
  errorGcmUpgradeNeeded,
  errorServiceError,
}

class PigeonIqDevice {
  PigeonIqDevice({
    required this.deviceIdentifier,
    required this.friendlyName,
    required this.status,
  });

  String deviceIdentifier;

  String friendlyName;

  PigeonIqDeviceStatus status;

  Object encode() {
    return <Object?>[
      deviceIdentifier,
      friendlyName,
      status.index,
    ];
  }

  static PigeonIqDevice decode(Object result) {
    result as List<Object?>;
    return PigeonIqDevice(
      deviceIdentifier: result[0]! as String,
      friendlyName: result[1]! as String,
      status: PigeonIqDeviceStatus.values[result[2]! as int],
    );
  }
}

class PigeonIqApp {
  PigeonIqApp({
    required this.applicationId,
    required this.status,
    required this.displayName,
    required this.version,
  });

  String applicationId;

  PigeonIqAppStatus status;

  String displayName;

  int version;

  Object encode() {
    return <Object?>[
      applicationId,
      status.index,
      displayName,
      version,
    ];
  }

  static PigeonIqApp decode(Object result) {
    result as List<Object?>;
    return PigeonIqApp(
      applicationId: result[0]! as String,
      status: PigeonIqAppStatus.values[result[1]! as int],
      displayName: result[2]! as String,
      version: result[3]! as int,
    );
  }
}

class PigeonIqOpenApplicationResult {
  PigeonIqOpenApplicationResult({
    required this.status,
  });

  PigeonIqOpenApplicationStatus status;

  Object encode() {
    return <Object?>[
      status.index,
    ];
  }

  static PigeonIqOpenApplicationResult decode(Object result) {
    result as List<Object?>;
    return PigeonIqOpenApplicationResult(
      status: PigeonIqOpenApplicationStatus.values[result[0]! as int],
    );
  }
}

class PigeonIqMessageResult {
  PigeonIqMessageResult({
    required this.status,
    this.failureDetails,
  });

  PigeonIqMessageStatus status;

  String? failureDetails;

  Object encode() {
    return <Object?>[
      status.index,
      failureDetails,
    ];
  }

  static PigeonIqMessageResult decode(Object result) {
    result as List<Object?>;
    return PigeonIqMessageResult(
      status: PigeonIqMessageStatus.values[result[0]! as int],
      failureDetails: result[1] as String?,
    );
  }
}

class InitAndroidOptions {
  InitAndroidOptions({
    required this.connectType,
    this.adbPort,
  });

  ConnectType connectType;

  int? adbPort;

  Object encode() {
    return <Object?>[
      connectType.index,
      adbPort,
    ];
  }

  static InitAndroidOptions decode(Object result) {
    result as List<Object?>;
    return InitAndroidOptions(
      connectType: ConnectType.values[result[0]! as int],
      adbPort: result[1] as int?,
    );
  }
}

class InitIosOptions {
  InitIosOptions({
    required this.urlScheme,
  });

  String urlScheme;

  Object encode() {
    return <Object?>[
      urlScheme,
    ];
  }

  static InitIosOptions decode(Object result) {
    result as List<Object?>;
    return InitIosOptions(
      urlScheme: result[0]! as String,
    );
  }
}

class AppId {
  AppId({
    required this.applicationId,
    this.storeId,
  });

  String applicationId;

  String? storeId;

  Object encode() {
    return <Object?>[
      applicationId,
      storeId,
    ];
  }

  static AppId decode(Object result) {
    result as List<Object?>;
    return AppId(
      applicationId: result[0]! as String,
      storeId: result[1] as String?,
    );
  }
}

class InitOptions {
  InitOptions({
    required this.applicationIds,
    required this.iosOptions,
    required this.androidOptions,
  });

  List<AppId?> applicationIds;

  InitIosOptions iosOptions;

  InitAndroidOptions androidOptions;

  Object encode() {
    return <Object?>[
      applicationIds,
      iosOptions.encode(),
      androidOptions.encode(),
    ];
  }

  static InitOptions decode(Object result) {
    result as List<Object?>;
    return InitOptions(
      applicationIds: (result[0] as List<Object?>?)!.cast<AppId?>(),
      iosOptions: InitIosOptions.decode(result[1]! as List<Object?>),
      androidOptions: InitAndroidOptions.decode(result[2]! as List<Object?>),
    );
  }
}

class InitResult {
  InitResult({
    required this.status,
  });

  InitStatus status;

  Object encode() {
    return <Object?>[
      status.index,
    ];
  }

  static InitResult decode(Object result) {
    result as List<Object?>;
    return InitResult(
      status: InitStatus.values[result[0]! as int],
    );
  }
}

class _ConnectIqHostApiCodec extends StandardMessageCodec {
  const _ConnectIqHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppId) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is InitAndroidOptions) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is InitIosOptions) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is InitOptions) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is InitResult) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonIqApp) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonIqDevice) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonIqMessageResult) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonIqOpenApplicationResult) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AppId.decode(readValue(buffer)!);
      case 129: 
        return InitAndroidOptions.decode(readValue(buffer)!);
      case 130: 
        return InitIosOptions.decode(readValue(buffer)!);
      case 131: 
        return InitOptions.decode(readValue(buffer)!);
      case 132: 
        return InitResult.decode(readValue(buffer)!);
      case 133: 
        return PigeonIqApp.decode(readValue(buffer)!);
      case 134: 
        return PigeonIqDevice.decode(readValue(buffer)!);
      case 135: 
        return PigeonIqMessageResult.decode(readValue(buffer)!);
      case 136: 
        return PigeonIqOpenApplicationResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ConnectIqHostApi {
  /// Constructor for [ConnectIqHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ConnectIqHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ConnectIqHostApiCodec();

  Future<InitResult> initialize(InitOptions arg_initOptions) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_initOptions]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as InitResult?)!;
    }
  }

  Future<List<PigeonIqDevice?>> getKnownDevices() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.getKnownDevices', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<PigeonIqDevice?>();
    }
  }

  Future<List<PigeonIqDevice?>> getConnectedDevices() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.getConnectedDevices', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<PigeonIqDevice?>();
    }
  }

  Future<PigeonIqApp> getApplicationInfo(String arg_deviceId, String arg_applicationId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.getApplicationInfo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_deviceId, arg_applicationId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonIqApp?)!;
    }
  }

  Future<PigeonIqOpenApplicationResult> openApplication(String arg_deviceId, String arg_applicationId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.openApplication', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_deviceId, arg_applicationId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonIqOpenApplicationResult?)!;
    }
  }

  /// [deviceId] is only used on iOS.
  Future<bool> openStore(String arg_deviceId, AppId arg_app) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.openStore', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_deviceId, arg_app]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<PigeonIqMessageResult> sendMessage(String arg_deviceId, String arg_applicationId, Map<String?, Object?> arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.sendMessage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_deviceId, arg_applicationId, arg_message]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonIqMessageResult?)!;
    }
  }

  Future<void> openStoreForGcm() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.openStoreForGcm', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iOsShowDeviceSelection() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.iOsShowDeviceSelection', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _FlutterConnectIqApiCodec extends StandardMessageCodec {
  const _FlutterConnectIqApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppId) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is InitAndroidOptions) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is InitIosOptions) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is InitOptions) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is InitResult) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonIqApp) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonIqDevice) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonIqMessageResult) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonIqOpenApplicationResult) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AppId.decode(readValue(buffer)!);
      case 129: 
        return InitAndroidOptions.decode(readValue(buffer)!);
      case 130: 
        return InitIosOptions.decode(readValue(buffer)!);
      case 131: 
        return InitOptions.decode(readValue(buffer)!);
      case 132: 
        return InitResult.decode(readValue(buffer)!);
      case 133: 
        return PigeonIqApp.decode(readValue(buffer)!);
      case 134: 
        return PigeonIqDevice.decode(readValue(buffer)!);
      case 135: 
        return PigeonIqMessageResult.decode(readValue(buffer)!);
      case 136: 
        return PigeonIqOpenApplicationResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class FlutterConnectIqApi {
  static const MessageCodec<Object?> codec = _FlutterConnectIqApiCodec();

  void onDeviceStatusChanged(PigeonIqDevice device);

  void onMessageReceived(PigeonIqDevice device, PigeonIqApp app, Object message);

  void showGcmInstallDialog(bool requiresUpgrade);

  static void setup(FlutterConnectIqApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onDeviceStatusChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onDeviceStatusChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonIqDevice? arg_device = (args[0] as PigeonIqDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onDeviceStatusChanged was null, expected non-null PigeonIqDevice.');
          api.onDeviceStatusChanged(arg_device!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onMessageReceived', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onMessageReceived was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonIqDevice? arg_device = (args[0] as PigeonIqDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onMessageReceived was null, expected non-null PigeonIqDevice.');
          final PigeonIqApp? arg_app = (args[1] as PigeonIqApp?);
          assert(arg_app != null,
              'Argument for dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onMessageReceived was null, expected non-null PigeonIqApp.');
          final Object? arg_message = (args[2] as Object?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onMessageReceived was null, expected non-null Object.');
          api.onMessageReceived(arg_device!, arg_app!, arg_message!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.showGcmInstallDialog', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.showGcmInstallDialog was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_requiresUpgrade = (args[0] as bool?);
          assert(arg_requiresUpgrade != null,
              'Argument for dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.showGcmInstallDialog was null, expected non-null bool.');
          api.showGcmInstallDialog(arg_requiresUpgrade!);
          return;
        });
      }
    }
  }
}
