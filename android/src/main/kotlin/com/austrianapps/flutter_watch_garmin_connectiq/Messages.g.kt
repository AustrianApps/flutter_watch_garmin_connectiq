// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.austrianapps.flutter_watch_garmin_connectiq

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class PigeonIqDeviceStatus(val raw: Int) {
  NOTPAIRED(0),
  NOTCONNECTED(1),
  CONNECTED(2),
  UNKNOWN(3);

  companion object {
    fun ofRaw(raw: Int): PigeonIqDeviceStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonIqAppStatus(val raw: Int) {
  UNKNOWN(0),
  INSTALLED(1),
  NOTINSTALLED(2),
  NOTSUPPORTED(3);

  companion object {
    fun ofRaw(raw: Int): PigeonIqAppStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonIqOpenApplicationStatus(val raw: Int) {
  PROMPTSHOWNONDEVICE(0),
  PROMPTNOTSHOWNONDEVICE(1),
  APPISNOTINSTALLED(2),
  APPISALREADYRUNNING(3),
  UNKNOWNFAILURE(4);

  companion object {
    fun ofRaw(raw: Int): PigeonIqOpenApplicationStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PigeonIqMessageStatus(val raw: Int) {
  SUCCESS(0),
  FAILUREUNKNOWN(1),
  FAILUREINVALIDFORMAT(2),
  FAILUREMESSAGETOOLARGE(3),
  FAILUREUNSUPPORTEDTYPE(4),
  FAILUREDURINGTRANSFER(5),
  FAILUREINVALIDDEVICE(6),
  FAILUREDEVICENOTCONNECTED(7);

  companion object {
    fun ofRaw(raw: Int): PigeonIqMessageStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ConnectType(val raw: Int) {
  WIRELESS(0),
  ADB(1);

  companion object {
    fun ofRaw(raw: Int): ConnectType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class InitStatus(val raw: Int) {
  SUCCESS(0),
  ERRORGCMNOTINSTALLED(1),
  ERRORGCMUPGRADENEEDED(2),
  ERRORSERVICEERROR(3);

  companion object {
    fun ofRaw(raw: Int): InitStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonIqDevice (
  val deviceIdentifier: String,
  val friendlyName: String,
  val status: PigeonIqDeviceStatus

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonIqDevice {
      val deviceIdentifier = list[0] as String
      val friendlyName = list[1] as String
      val status = PigeonIqDeviceStatus.ofRaw(list[2] as Int)!!
      return PigeonIqDevice(deviceIdentifier, friendlyName, status)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      deviceIdentifier,
      friendlyName,
      status.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonIqApp (
  val applicationId: String,
  val status: PigeonIqAppStatus,
  val displayName: String,
  val version: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonIqApp {
      val applicationId = list[0] as String
      val status = PigeonIqAppStatus.ofRaw(list[1] as Int)!!
      val displayName = list[2] as String
      val version = list[3].let { if (it is Int) it.toLong() else it as Long }
      return PigeonIqApp(applicationId, status, displayName, version)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      applicationId,
      status.raw,
      displayName,
      version,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonIqOpenApplicationResult (
  val status: PigeonIqOpenApplicationStatus

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonIqOpenApplicationResult {
      val status = PigeonIqOpenApplicationStatus.ofRaw(list[0] as Int)!!
      return PigeonIqOpenApplicationResult(status)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      status.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PigeonIqMessageResult (
  val status: PigeonIqMessageStatus,
  val failureDetails: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PigeonIqMessageResult {
      val status = PigeonIqMessageStatus.ofRaw(list[0] as Int)!!
      val failureDetails = list[1] as String?
      return PigeonIqMessageResult(status, failureDetails)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      status.raw,
      failureDetails,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class InitAndroidOptions (
  val connectType: ConnectType,
  val adbPort: Long? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): InitAndroidOptions {
      val connectType = ConnectType.ofRaw(list[0] as Int)!!
      val adbPort = list[1].let { if (it is Int) it.toLong() else it as Long? }
      return InitAndroidOptions(connectType, adbPort)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      connectType.raw,
      adbPort,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class InitIosOptions (
  val urlScheme: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): InitIosOptions {
      val urlScheme = list[0] as String
      return InitIosOptions(urlScheme)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      urlScheme,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AppId (
  val applicationId: String,
  val storeId: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AppId {
      val applicationId = list[0] as String
      val storeId = list[1] as String?
      return AppId(applicationId, storeId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      applicationId,
      storeId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class InitOptions (
  val applicationIds: List<AppId?>,
  val iosOptions: InitIosOptions,
  val androidOptions: InitAndroidOptions

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): InitOptions {
      val applicationIds = list[0] as List<AppId?>
      val iosOptions = InitIosOptions.fromList(list[1] as List<Any?>)
      val androidOptions = InitAndroidOptions.fromList(list[2] as List<Any?>)
      return InitOptions(applicationIds, iosOptions, androidOptions)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      applicationIds,
      iosOptions.toList(),
      androidOptions.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class InitResult (
  val status: InitStatus

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): InitResult {
      val status = InitStatus.ofRaw(list[0] as Int)!!
      return InitResult(status)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      status.raw,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object ConnectIqHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppId.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitAndroidOptions.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitIosOptions.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitOptions.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitResult.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonIqApp.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonIqDevice.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonIqMessageResult.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonIqOpenApplicationResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AppId -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is InitAndroidOptions -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is InitIosOptions -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is InitOptions -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is InitResult -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PigeonIqApp -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PigeonIqDevice -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is PigeonIqMessageResult -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is PigeonIqOpenApplicationResult -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ConnectIqHostApi {
  fun initialize(initOptions: InitOptions, callback: (Result<InitResult>) -> Unit)
  fun getKnownDevices(callback: (Result<List<PigeonIqDevice>>) -> Unit)
  fun getConnectedDevices(callback: (Result<List<PigeonIqDevice>>) -> Unit)
  fun getApplicationInfo(deviceId: String, applicationId: String, callback: (Result<PigeonIqApp>) -> Unit)
  fun openApplication(deviceId: String, applicationId: String, callback: (Result<PigeonIqOpenApplicationResult>) -> Unit)
  fun openStore(app: AppId, callback: (Result<Boolean>) -> Unit)
  fun sendMessage(deviceId: String, applicationId: String, message: Map<String, Any>, callback: (Result<PigeonIqMessageResult>) -> Unit)
  fun openStoreForGcm(callback: (Result<Unit>) -> Unit)
  fun iOsShowDeviceSelection(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by ConnectIqHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      ConnectIqHostApiCodec
    }
    /** Sets up an instance of `ConnectIqHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ConnectIqHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val initOptionsArg = args[0] as InitOptions
            api.initialize(initOptionsArg) { result: Result<InitResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.getKnownDevices", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getKnownDevices() { result: Result<List<PigeonIqDevice>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.getConnectedDevices", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getConnectedDevices() { result: Result<List<PigeonIqDevice>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.getApplicationInfo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val applicationIdArg = args[1] as String
            api.getApplicationInfo(deviceIdArg, applicationIdArg) { result: Result<PigeonIqApp> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.openApplication", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val applicationIdArg = args[1] as String
            api.openApplication(deviceIdArg, applicationIdArg) { result: Result<PigeonIqOpenApplicationResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.openStore", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val appArg = args[0] as AppId
            api.openStore(appArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.sendMessage", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceIdArg = args[0] as String
            val applicationIdArg = args[1] as String
            val messageArg = args[2] as Map<String, Any>
            api.sendMessage(deviceIdArg, applicationIdArg, messageArg) { result: Result<PigeonIqMessageResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.openStoreForGcm", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.openStoreForGcm() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.ConnectIqHostApi.iOsShowDeviceSelection", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.iOsShowDeviceSelection() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object FlutterConnectIqApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AppId.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitAndroidOptions.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitIosOptions.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitOptions.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitResult.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonIqApp.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonIqDevice.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonIqMessageResult.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PigeonIqOpenApplicationResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AppId -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is InitAndroidOptions -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is InitIosOptions -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is InitOptions -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is InitResult -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PigeonIqApp -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is PigeonIqDevice -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is PigeonIqMessageResult -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is PigeonIqOpenApplicationResult -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class FlutterConnectIqApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by FlutterConnectIqApi. */
    val codec: MessageCodec<Any?> by lazy {
      FlutterConnectIqApiCodec
    }
  }
  fun onDeviceStatusChanged(deviceArg: PigeonIqDevice, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onDeviceStatusChanged", codec)
    channel.send(listOf(deviceArg)) {
      callback()
    }
  }
  fun onMessageReceived(deviceArg: PigeonIqDevice, appArg: PigeonIqApp, messageArg: Any, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.onMessageReceived", codec)
    channel.send(listOf(deviceArg, appArg, messageArg)) {
      callback()
    }
  }
  fun showGcmInstallDialog(requiresUpgradeArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_watch_garmin_connectiq.FlutterConnectIqApi.showGcmInstallDialog", codec)
    channel.send(listOf(requiresUpgradeArg)) {
      callback()
    }
  }
}
